<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Carbon\Carbon;
use Gemini;

class GeminiController extends Controller
{
    public static function getText(): JsonResponse
    {
        try {
            Carbon::setLocale('es');
            $fechaActual = Carbon::now();
            $dia = $fechaActual->day;
            $nombreMes = $fechaActual->monthName;
            
            $prompt = "";

            $apiKey = env('GEMINI_API_KEY');
            $client = Gemini::client($apiKey);
            
            // Intentar con diferentes modelos disponibles
            $modelsToTry = [
                'gemini-pro',
                'gemini-1.5-pro',
                'gemini-1.5-flash',
                'gemini-2.0-flash-exp',
                'text-bison-001'
            ];
            
            $lastError = null;
            
            foreach ($modelsToTry as $modelName) {
                try {
                    $result = $client->generativeModel($modelName)->generateContent($prompt);
                    
                    return response()->json([
                        'success' => true,
                        'data' => [
                            'fecha' => "$dia de $nombreMes",
                            'efemeride' => $result->text(),
                            'model_used' => $modelName
                        ]
                    ], 200);
                    
                } catch (\Exception $e) {
                    $lastError = $e->getMessage();
                    continue; // Intentar con el siguiente modelo
                }
            }
            
            // Si ning√∫n modelo funciona, devolver error
            throw new \Exception("No se pudo encontrar un modelo compatible. √öltimo error: " . $lastError);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error al obtener la efem√©ride',
                'error' => $e->getMessage()
            ], 500);
        }
    }
    
    public static function listAvailableModels(): JsonResponse
    {
        try {
            $apiKey = env('GEMINI_API_KEY');
            $client = Gemini::client($apiKey);
            
            // Intentar obtener la lista de modelos
            $models = $client->models()->list();
            
            return response()->json([
                'success' => true,
                'models' => $models->toArray()
            ], 200);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error al obtener la lista de modelos',
                'error' => $e->getMessage()
            ], 500);
        }
    }
    
    public static function analyzeImpactSimulation(Request $request): JsonResponse
    {
        try {
            // Obtener datos de la simulaci√≥n
            $impactData = $request->input('impactData');
            
            if (empty($impactData)) {
                return response()->json([
                    'success' => false,
                    'message' => 'Por favor proporciona los datos de la simulaci√≥n'
                ], 400);
            }

            // Verificar que tenemos la API key
            $apiKey = env('GEMINI_API_KEY');
            if (empty($apiKey)) {
                return response()->json([
                    'success' => false,
                    'message' => 'API key de Gemini no configurada'
                ], 500);
            }
            
            // Extraer datos relevantes
            $name = $impactData['name'] ?? 'Meteorito desconocido';
            $diameter = $impactData['calculations']['diameter_m'] ?? 0;
            $mass = $impactData['calculations']['mass_kg'] ?? 0;
            $velocity = $impactData['calculations']['velocity_ms'] ?? 0;
            $energy = $impactData['calculations']['kinetic_energy_initial_megatons_tnt'] ?? 0;
            $craterDiameter = $impactData['atmospheric_impact']['crater_diameter_m'] ?? 0;
            $energyRemaining = ($impactData['atmospheric_impact']['f_atm'] ?? 0) * 100;
            $massRemaining = ($impactData['atmospheric_impact']['f_frag'] ?? 0) * 100;
            $fragmented = $impactData['atmospheric_impact']['broke'] ? 'S√ç' : 'NO';
            $breakupAlt = isset($impactData['atmospheric_impact']['breakup_altitude_m']) 
                ? round($impactData['atmospheric_impact']['breakup_altitude_m'] / 1000, 2) 
                : null;

            $analysisPrompt = "Eres un astrof√≠sico experto de la NASA. Analiza el siguiente impacto de meteorito y proporciona SOLO el an√°lisis cient√≠fico. NO incluyas saludos, introducciones ni frases como 'Aqu√≠ tienes' o 'A continuaci√≥n'. Empieza directamente con el contenido.

üìä DATOS DE LA SIMULACI√ìN:

üå† Meteorito: {$name}
‚Ä¢ Di√°metro: " . round($diameter, 2) . " metros
‚Ä¢ Masa: " . number_format($mass, 0, '.', ',') . " kg (" . sprintf('%.2e', $mass) . " kg)
‚Ä¢ Velocidad: " . round($velocity, 2) . " m/s (" . round($velocity/1000, 2) . " km/s)
‚Ä¢ Energ√≠a inicial: {$energy} megatones de TNT

üåç EFECTOS ATMOSF√âRICOS:
‚Ä¢ Energ√≠a remanente despu√©s de atm√≥sfera: {$energyRemaining}%
‚Ä¢ Masa remanente despu√©s de atm√≥sfera: {$massRemaining}%
‚Ä¢ ¬øSe fragment√≥?: {$fragmented}" . ($breakupAlt ? "
‚Ä¢ Altitud de fragmentaci√≥n: {$breakupAlt} km" : "") . "

üí• IMPACTO EN SUPERFICIE:
‚Ä¢ Di√°metro del cr√°ter: " . round($craterDiameter, 0) . " metros (" . round($craterDiameter/1000, 2) . " km)
‚Ä¢ Radio del cr√°ter: " . round($craterDiameter/2, 0) . " metros

Proporciona directamente estas 5 secciones:

1. **COMPARACI√ìN HIST√ìRICA** (2-3 l√≠neas): Compara este impacto con eventos hist√≥ricos reales (Tunguska, Chelyabinsk, Chicxulub, etc.). ¬øQu√© tan poderoso es en comparaci√≥n?

2. **AN√ÅLISIS DE PELIGROSIDAD** (3-4 l√≠neas): Eval√∫a el nivel de amenaza (bajo, moderado, alto, catastr√≥fico) y explica las consecuencias espec√≠ficas. ¬øQu√© √°reas ser√≠an afectadas? ¬øCu√°ntas personas en riesgo?

3. **EFECTOS DETALLADOS** (3-4 l√≠neas): Describe los efectos espec√≠ficos:
   - Onda expansiva y radio de destrucci√≥n
   - Efectos t√©rmicos (incendios, flash)
   - Efectos s√≠smicos
   - Posibles tsunamis (si aplica)
   - Efectos atmosf√©ricos (polvo, clima)

4. **MEDIDAS DE MITIGACI√ìN** (2-3 l√≠neas): Si se detectara con anticipaci√≥n, ¬øqu√© estrategias de deflexi√≥n ser√≠an m√°s efectivas? (impactador cin√©tico, bomba nuclear, tractor gravitacional, etc.)

5. **DATO CURIOSO** (1-2 l√≠neas): Proporciona un dato interesante o comparaci√≥n creativa que ayude a visualizar la magnitud del impacto.

RECUERDA: Empieza DIRECTAMENTE con '## COMPARACI√ìN HIST√ìRICA'. NO incluyas introducciones. USA FORMATO MARKDOWN CON EMOJIS.";

            $client = Gemini::client($apiKey);
            
            // Intentar con diferentes modelos disponibles
            $modelsToTry = [
                'gemini-2.0-flash-exp',
                'gemini-1.5-pro',
                'gemini-1.5-flash',
                'gemini-pro'
            ];
            
            $lastError = null;
            
            foreach ($modelsToTry as $modelName) {
                try {
                    $result = $client->generativeModel($modelName)->generateContent($analysisPrompt);
                    
                    return response()->json([
                        'success' => true,
                        'data' => [
                            'analysis' => $result->text(),
                            'model_used' => $modelName,
                            'impact_summary' => [
                                'name' => $name,
                                'diameter' => round($diameter, 2),
                                'energy' => $energy,
                                'crater_diameter' => round($craterDiameter, 0),
                                'threat_level' => self::calculateThreatLevel($energy)
                            ]
                        ]
                    ], 200);
                    
                } catch (\Exception $e) {
                    $lastError = $e->getMessage();
                    continue;
                }
            }
            
            throw new \Exception("No se pudo encontrar un modelo compatible. √öltimo error: " . $lastError);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error al analizar la simulaci√≥n',
                'error' => $e->getMessage()
            ], 500);
        }
    }
    
    private static function calculateThreatLevel($energy): string
    {
        if ($energy < 0.01) return 'Insignificante';
        if ($energy < 1) return 'Bajo';
        if ($energy < 10) return 'Moderado';
        if ($energy < 100) return 'Alto';
        if ($energy < 1000) return 'Muy Alto';
        return 'Catastr√≥fico';
    }

    public static function askNASAExpert(Request $request): JsonResponse
    {
        try {
            // Obtener la pregunta del request
            $userQuestion = $request->input('question', '');
            
            if (empty($userQuestion)) {
                return response()->json([
                    'success' => false,
                    'message' => 'Por favor proporciona una pregunta'
                ], 400);
            }

            // Verificar que tenemos la API key
            $apiKey = env('GEMINI_API_KEY');
            if (empty($apiKey)) {
                return response()->json([
                    'success' => false,
                    'message' => 'API key de Gemini no configurada'
                ], 500);
            }
            
            $expertPrompt = "Eres un profesor de la NASA que es experto en astrof√≠sica y se especializa en meteorolog√≠a espacial. Tu tarea es ayudar al usuario a entender que esta pasando en la simulaci√≥n, a su vez de tambi√©n resolver cualquier duda que tenga en base a los siguientes c√°lculos, los cuales son los que usamos en nuestra simulaci√≥n:

C√ÅLCULOS DE LA SIMULACI√ìN:
- Di√°metro: Usamos media geom√©trica entre min y max para evitar sesgos
- Densidad: Por defecto 2700 kg/m¬≥ (roca: 2500-3000, hierro: 7800, n√≠quel: 8900)
- Volumen y masa: Calculamos como esfera equivalente
- Velocidad: Convertimos de km/s a m/s, con m√≠nimo f√≠sico de 11000 m/s
- Energ√≠a cin√©tica inicial: E = 0.5 * m * v¬≤

EFECTOS ATMOSF√âRICOS:
- Ablaci√≥n por fricci√≥n: dm/dt = -(Lambda * A * rho_air * v¬≥)/(2 * Q)
- Ruptura por presi√≥n din√°mica: q = 0.5 * rho * v¬≤ > resistencia material
- Fuerza de arrastre: Fd = 0.5 * Cd * rho_air * v¬≤ * A
- Integraci√≥n semi-impl√≠cita con dt adaptativo

RESULTADOS:
- f_atm: Fracci√≥n de energ√≠a que sobrevive la atm√≥sfera
- f_frag: Fracci√≥n de masa tras fragmentaci√≥n
- Di√°metro de cr√°ter: Estimaci√≥n emp√≠rica usando modelo Melosh/Holsapple

Da respuestas cortas y concisas pero que ayuden a resolver todas las dudas del usuario de manera clara.

PREGUNTA DEL USUARIO: {$userQuestion}";

            $client = Gemini::client($apiKey);
            
            // Intentar con diferentes modelos disponibles
            $modelsToTry = [
                'gemini-pro',
                'gemini-1.5-pro', 
                'gemini-1.5-flash',
                'gemini-2.0-flash-exp',
                'text-bison-001'
            ];
            
            $lastError = null;
            
            foreach ($modelsToTry as $modelName) {
                try {
                    $result = $client->generativeModel($modelName)->generateContent($expertPrompt);
                    
                    return response()->json([
                        'success' => true,
                        'data' => [
                            'question' => $userQuestion,
                            'expert_response' => $result->text(),
                            'model_used' => $modelName
                        ]
                    ], 200);
                    
                } catch (\Exception $e) {
                    $lastError = $e->getMessage();
                    continue;
                }
            }
            
            throw new \Exception("No se pudo encontrar un modelo compatible. √öltimo error: " . $lastError);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error al consultar al experto de la NASA',
                'error' => $e->getMessage(),
                'debug' => [
                    'request_data' => $request->all(),
                    'api_key_exists' => !empty(getenv('GEMINI_API_KEY'))
                ]
            ], 500);
        }
    } 
}
